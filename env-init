#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

# Configuration
# ----
# Variables to set when sourcing the environment
TARGET_MACHINE="${TARGET_MACHINE:-qemuarm}"
TEST_ARTIFACTS_DIR="${TEST_ARTIFACTS_DIR:-${SCRIPT_DIR}/work/artifacts}"

KAS_CMD="KAS_WORK_DIR=${SCRIPT_DIR}/work ${SCRIPT_DIR}/tools/build/kas-container.4.5"
KAS_CONF="${SCRIPT_DIR}/conf/kas-${TARGET_MACHINE}.yml"

TEST_VERSIONS=(
    'manufacturing'
    'lts'
    'latest'
)
TEST_BUILD_ARTIFACTS=(
    'bootenv.img'
    'u-boot.bin'
    'core-image-minimal-qemuarm.rootfs.wic.qcow2'
    "update-bundle-${TARGET_MACHINE}.raucb"
)
TEST_DOCKER_IMAGE="emulated-linux-testing"
# ----

# Setup
# ----
function testenv_setup() {
    local -r flag="$1"
    if [[ "${flag}" == "-f" ]] || ! docker inspect "${TEST_DOCKER_IMAGE}" &>/dev/null; then
        DOCKER_BUILDKIT=1 docker build -t "${TEST_DOCKER_IMAGE}" "${SCRIPT_DIR}/tools/test"
    fi
}

alias buildenv-setup="${KAS_CMD} checkout ${KAS_CONF}"
alias testenv-rebuild="testenv_setup -f"
# ----

# Build
# ----
alias build-shell="${KAS_CMD} shell ${KAS_CONF}"
alias build-image="${KAS_CMD} build ${KAS_CONF}"
alias build-runqemu="${KAS_CMD} shell ${KAS_CONF} -c 'runqemu wic.qcow2 serial nographic slirp'"

function publish_test_artifacts() {
    rm -rf "${TEST_ARTIFACTS_DIR:?}"/*
    mkdir -p "${TEST_ARTIFACTS_DIR}"
    for version in "${TEST_VERSIONS[@]}"; do
        for artifact in "${TEST_BUILD_ARTIFACTS[@]}"; do
            path="${SCRIPT_DIR}/work/build/tmp-${version}/deploy/images/${TARGET_MACHINE}/${artifact}"
            cp "${path}" "${TEST_ARTIFACTS_DIR}/${version}.${artifact}" &>/dev/null || true
        done
    done
}
alias build-publish="publish_test_artifacts"
# ----

# Test
# ----
function run_in_testenv() {
    # Make sure the test environment is available
    testenv_setup

    local extra_opts=""
    if [[ "$1" == "-i" ]]; then
        extra_opts+="-i "
        shift
    fi
    # Exposing the serial and network connection to the raspberrypi
    if [[ "${TARGET_MACHINE}" == "raspberrypi4" ]]; then
        extra_opts+="--device /dev/ttyUSB0 --network host "
    fi
    docker run --rm -t \
        -v "${SCRIPT_DIR}/test"/:/test/ \
        -v "${TEST_ARTIFACTS_DIR}"/:/artifacts:ro \
        -w /test ${extra_opts} \
        ${TEST_DOCKER_IMAGE} "$@"
}

alias test-shell="run_in_testenv -i /bin/bash"
alias test-run-pytest="run_in_testenv /usr/local/bin/pytest"
# ----